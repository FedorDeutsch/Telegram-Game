import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command


token = "7014899022:AAEddAEJBNhGZsLNRqBu_JEOk1CtUp_OkTg"
class Item:
    def __init__(self, name, cost, effect, level):
        self.name = name
        self.cost = cost
        self.effect = effect
        self.level = level

class Store:
    def __init__(self):
        self.worker_cost = 100
        self.available_workers = 2
        self.pickaxes = [
            Item("–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –∫–∏—Ä–∫–∞", 50, 5, 1),
            Item("–ë—Ä–æ–Ω–∑–æ–≤–∞—è –∫–∏—Ä–∫–∞", 100, 10, 3),
            Item("–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∫–∞", 200, 20, 6),
            Item("–°–µ—Ä–µ–±—Ä—è–Ω–∞—è –∫–∏—Ä–∫–∞", 400, 40, 12),
            Item("–ó–æ–ª–æ—Ç–∞—è –∫–∏—Ä–∫–∞", 800, 80, 24),
            Item("–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è –∫–∏—Ä–∫–∞", 1600, 160, 48),
            Item("–ê–ª–º–∞–∑–Ω–∞—è –∫–∏—Ä–∫–∞", 3200, 320, 96),
            Item("–¢–∏—Ç–∞–Ω–æ–≤–∞—è –∫–∏—Ä–∫–∞", 6400, 640, 192),
            Item("–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –∫–∏—Ä–∫–∞", 12800, 1280, 384),
            Item("–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∫–∏—Ä–∫–∞", 25600, 2560, 768)
        ]
        self.swords = [
            Item("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á", 50, 10, 1),
            Item("–ë—Ä–æ–Ω–∑–æ–≤—ã–π –º–µ—á", 100, 20, 3),
            Item("–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á", 200, 40, 6),
            Item("–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –º–µ—á", 400, 80, 12),
            Item("–ó–æ–ª–æ—Ç–æ–π –º–µ—á", 800, 160, 24),
            Item("–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –º–µ—á", 1600, 320, 48),
            Item("–ê–ª–º–∞–∑–Ω—ã–π –º–µ—á", 3200, 640, 96),
            Item("–¢–∏—Ç–∞–Ω–æ–≤—ã–π –º–µ—á", 6400, 1280, 192),
            Item("–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á", 12800, 2560, 384),
            Item("–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—á", 25600, 5120, 768)
        ]

    def get_available_items(self, level, item_type): # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        items = self.pickaxes if item_type == 'pickaxe' else self.swords # –ï—Å–ª–∏ `item_type` —Ä–∞–≤–µ–Ω 'pickaxe', —Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `items` –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ `self.pickaxes` (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, —Å–ø–∏—Å–æ–∫ –∫–∏—Ä–æ–∫)
        # –ï—Å–ª–∏ `item_type` —Ä–∞–≤–µ–Ω 'sword', —Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `items` –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ `self.swords`
        return [item for item in items if level >= item.level] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ —É—Ä–æ–≤–Ω—é

class User:
    def __init__(self):
        self.gold = 0
        self.exp = 0
        self.level = 1
        self.pickaxe_level = 0
        self.sword_level = 0
        self.workers = 2
        self.gold_per_sec = 0
        self.exp_per_sec = 0

    def update_stats(self):
        self.gold_per_sec = 10 + self.workers * self.pickaxe_level
        self.exp_per_sec = 20 + self.workers * self.sword_level

class GameBot:
    def __init__(self, token):
        self.bot = Bot(token)
        self.dp = Dispatcher()
        self.store = Store()
        self.users = {}

    async def start(self):
        self.dp.message.register(self.start, Command(commands=["start"]))
        self.dp.callback_query.register(self.button_click, lambda c: True)
        await self.bot.delete_webhook(drop_pending_updates=True) # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π –±–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã –±–æ—Ç—É –∫–æ–≥–¥–∞ –æ–Ω –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω
        await self.dp.start_polling(self.bot)

    def get_user(self, user_id): # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ users, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ
        if user_id not in self.users:
            self.users[user_id] = User()
        return self.users[user_id]

    async def start(self, message: types.Message):
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="–î–æ–±—ã—á–∞ –∑–æ–ª–æ—Ç–∞ üí∞", callback_data="gold"),
            InlineKeyboardButton(text="–î–æ–±—ã—á–∞ –æ–ø—ã—Ç–∞ ‚ú®", callback_data="exp")
        )
        builder.row(
            InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å ü§ñ", callback_data="profile"),
            InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="stats")
        )
        builder.row(
            InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω üõí", callback_data="shop")
        )
        builder.add(
            InlineKeyboardButton(text="–ì–∞–π–¥ ‚öôÔ∏è", callback_data="guide")
        )


        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=builder.as_markup())

    async def button_click(self, callback_query: types.CallbackQuery): # callback_query —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞.
        user_id = callback_query.from_user.id
        user = self.get_user(user_id)
        action = callback_query.data

        if action == "gold":
            await self.gold_click(callback_query, user)
        elif action == "exp":
            await self.exp_click(callback_query, user)
        elif action == "profile":
            await self.profile(callback_query, user)
        elif action == "stats":
            await self.stats(callback_query, user)
        elif action == "shop":
            await self.shop(callback_query, user)
        elif action == "guide":
            await self.guide(callback_query)
        elif action.startswith("buy_worker"):
            await self.buy_worker(callback_query, user)
        elif action.startswith("buy_pickaxe"):
            await self.buy_pickaxe(callback_query, user)
        elif action.startswith("upgrade_sword"):
            await self.upgrade_sword(callback_query, user)

    async def gold_click(self, callback_query, user):
        if user.workers <= 0:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É —Ä–∞–±–æ—á–∏—Ö")
        else:
            if user.gold_per_sec == 0:
                asyncio.create_task(self.give_gold(callback_query.from_user.id))
            user.workers -= 1
            user.gold_per_sec += 10 + user.pickaxe_level
            await callback_query.message.answer(
                f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å {10 + user.pickaxe_level} –∑–æ–ª–æ—Ç–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ.\n"
                f"1 —Ä–∞–±–æ—á–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ–±—ã—á—É –∑–æ–ª–æ—Ç–∞.\n–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {user.workers}"
            )

    async def exp_click(self, callback_query, user):
        if user.workers <= 0:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É —Ä–∞–±–æ—á–∏—Ö")
        else:
            if user.exp_per_sec == 0:
                asyncio.create_task(self.give_exp(callback_query.from_user.id))
            user.workers -= 1
            user.exp_per_sec += 20 + user.sword_level
            await callback_query.message.answer(
                f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å {20 + user.sword_level} –æ–ø—ã—Ç–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ.\n"
                f"1 —Ä–∞–±–æ—á–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ–±—ã—á—É –æ–ø—ã—Ç–∞. \n–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {user.workers}"
            )

    async def profile(self, callback_query, user):
        await callback_query.message.answer(
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üëæ:\n"
            f"–£—Ä–æ–≤–µ–Ω—å üëΩ: {user.level}\n"
            f"–ó–æ–ª–æ—Ç–æ üí∞: {user.gold}\n"
            f"–û–ø—ã—Ç ‚ú®: {user.exp}/{user.level * 200}\n"
            f"–†–∞–±–æ—á–∏–µ üë∑: {user.workers}"
        )

    async def stats(self, callback_query, user):
        await callback_query.message.answer(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ó–æ–ª–æ—Ç–æ/—Å: {user.gold_per_sec}\n"
            f"–û–ø—ã—Ç/—Å: {user.exp_per_sec}"
        )

    async def shop(self, callback_query, user):
        cost = self.store.worker_cost
        available_workers = self.store.available_workers
        await callback_query.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ä–∞–±–æ—á–∏—Ö, –∫–∏—Ä–∫–∏ –∏ —É–ª—É—á—à–∏—Ç—å –º–µ—á –∑–¥–µ—Å—å.\n"
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ: {cost} –∑–æ–ª–æ—Ç–∞.\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–±–æ—á–∏—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {available_workers}\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ üë∑", callback_data="buy_worker")],
                [InlineKeyboardButton(text="–ö–∏—Ä–∫–∏ ‚õèÔ∏è", callback_data="shop_pickaxes")],
                [InlineKeyboardButton(text="–ú–µ—á–∏ ‚öîÔ∏è", callback_data="shop_swords")]
            ])
        )

    async def guide(self, callback_query):
        await callback_query.message.answer("–≠—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.")

    async def buy_worker(self, callback_query, user):
        cost = self.store.worker_cost
        if user.gold >= cost and self.store.available_workers > 0:
            user.gold -= cost
            user.workers += 1
            self.store.available_workers -= 1
            next_cost = cost * 2 if self.store.available_workers == 0 else cost
            if self.store.available_workers == 0:
                self.store.worker_cost = next_cost
                self.store.available_workers = 2
            await callback_query.message.answer(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ä–∞–±–æ—á–µ–≥–æ. –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {self.store.available_workers}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ: {next_cost} –∑–æ–ª–æ—Ç–∞.\n"
                f"–£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {user.workers} —Ä–∞–±–æ—á–∏—Ö."
            )
        else:
            await callback_query.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")

    async def buy_pickaxe(self, callback_query, user):
        available_pickaxes = self.store.get_available_items(user.level, 'pickaxe')
        if not available_pickaxes:
            await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∏—Ä–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.")
            return

        buttons = []
        for pickaxe in available_pickaxes:
            buttons.append(
                InlineKeyboardButton(text=f"{pickaxe.name} - {pickaxe.cost} –∑–æ–ª–æ—Ç–∞", callback_data=f"pickaxe_{pickaxe.level}")
            )
        await callback_query.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∏—Ä–∫–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[buttons]))

    async def upgrade_sword(self, callback_query, user):
        available_swords = self.store.get_available_items(user.level, 'sword')
        if not available_swords:
            await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—á–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.")
            return

        buttons = []
        for sword in available_swords:
            buttons.append(
                InlineKeyboardButton(text=f"{sword.name} - {sword.cost} –æ–ø—ã—Ç–∞", callback_data=f"sword_{sword.level}")
            )
        await callback_query.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—á–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[buttons]))

    async def give_gold(self, user_id): # –§—É–Ω–∫—Ü–∏—è –¥–∞–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å–æ–ª–æ—Ç–æ —Å–∫–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—å—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π gold_per_sec (–∑–æ–ª–æ—Ç–æ –≤ —Å–µ–∫—É–Ω–¥—É) –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç —ç—Ç—É —Å—É–º–º—É —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
        while self.users[user_id].gold_per_sec > 0:
            self.users[user_id].gold += self.users[user_id].gold_per_sec
            await asyncio.sleep(1)

    async def give_exp(self, user_id):
        while self.users[user_id].exp_per_sec > 0:
            self.users[user_id].exp += self.users[user_id].exp_per_sec
            await self.level_up(user_id)
            await asyncio.sleep(1)

    async def level_up(self, user_id):
        user = self.get_user(user_id)
        if user.exp >= user.level * 200:
            user.exp -= user.level * 200
            user.level += 1
            await self.bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {user.level}.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

bot = GameBot(token)
asyncio.run(bot.start())
