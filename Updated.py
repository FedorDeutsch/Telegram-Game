import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command


token = "7014899022:AAEddAEJBNhGZsLNRqBu_JEOk1CtUp_OkTg"

class Item:
    def __init__(self, name, cost, effect, level):
        self.name = name
        self.cost = cost
        self.effect = effect
        self.level = level

class Shop:
    def __init__(self):
        self.worker_cost = 100
        self.available_workers = 2
        self.pickaxes = [
            Item("–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –∫–∏—Ä–∫–∞", 50, 5, 1),
            Item("–ë—Ä–æ–Ω–∑–æ–≤–∞—è –∫–∏—Ä–∫–∞", 100, 10, 3),
            Item("–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∫–∞", 200, 20, 6),
            Item("–°–µ—Ä–µ–±—Ä—è–Ω–∞—è –∫–∏—Ä–∫–∞", 400, 40, 12),
            Item("–ó–æ–ª–æ—Ç–∞—è –∫–∏—Ä–∫–∞", 800, 80, 24),
            Item("–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è –∫–∏—Ä–∫–∞", 1600, 160, 48),
            Item("–ê–ª–º–∞–∑–Ω–∞—è –∫–∏—Ä–∫–∞", 3200, 320, 96),
            Item("–¢–∏—Ç–∞–Ω–æ–≤–∞—è –∫–∏—Ä–∫–∞", 6400, 640, 192),
            Item("–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –∫–∏—Ä–∫–∞", 12800, 1280, 384),
            Item("–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∫–∏—Ä–∫–∞", 25600, 2560, 768)
        ]
        self.swords = [
            Item("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á", 50, 10, 1),
            Item("–ë—Ä–æ–Ω–∑–æ–≤—ã–π –º–µ—á", 100, 20, 3),
            Item("–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á", 200, 40, 6),
            Item("–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –º–µ—á", 400, 80, 12),
            Item("–ó–æ–ª–æ—Ç–æ–π –º–µ—á", 800, 160, 24),
            Item("–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –º–µ—á", 1600, 320, 48),
            Item("–ê–ª–º–∞–∑–Ω—ã–π –º–µ—á", 3200, 640, 96),
            Item("–¢–∏—Ç–∞–Ω–æ–≤—ã–π –º–µ—á", 6400, 1280, 192),
            Item("–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á", 12800, 2560, 384),
            Item("–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—á", 25600, 5120, 768)
        ]

    def get_available_items(self, level, item_type):
        items = self.pickaxes if item_type == 'pickaxe' else self.swords
        return [item for item in items if level >= item.level]

class User:
    def __init__(self):
        self.gold = 0
        self.exp = 0
        self.level = 1
        self.workers = 2
        self.gold_per_sec = 0
        self.exp_per_sec = 0

class GameBot:
    def __init__(self, token):
        self.bot = Bot(token)
        self.dp = Dispatcher()
        self.shop = Shop()
        self.users = {}

    async def start(self):
        self.dp.message.register(self.start, Command(commands=["start"]))
        self.dp.callback_query.register(self.button_click, lambda c: True)
        await self.bot.delete_webhook(drop_pending_updates=True)
        await self.dp.start_polling(self.bot)

    def get_user(self, user_id):
        if user_id not in self.users:
            self.users[user_id] = User()
        return self.users[user_id]

    async def start(self, message: types.Message):
        buttons = [
            [InlineKeyboardButton(text="–î–æ–±—ã—á–∞ –∑–æ–ª–æ—Ç–∞ üí∞", callback_data="gold")],
            [InlineKeyboardButton(text="–î–æ–±—ã—á–∞ –æ–ø—ã—Ç–∞ ‚ú®", callback_data="exp")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å ü§ñ", callback_data="profile")],
            [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="stats")],
            [InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω üõí", callback_data="shop")],
            [InlineKeyboardButton(text="–ì–∞–π–¥ ‚öôÔ∏è", callback_data="guide")]
        ]
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

    async def button_click(self, callback_query: types.CallbackQuery):
        user = self.get_user(callback_query.from_user.id)
        action = callback_query.data
        if action == "gold":
            await self.gold_click(callback_query, user)
        elif action == "exp":
            await self.exp_click(callback_query, user)
        elif action == "profile":
            await self.profile(callback_query, user)
        elif action == "stats":
            await self.stats(callback_query, user)
        elif action == "shop":
            await self.shop(callback_query, user)
        elif action == "guide":
            await self.guide(callback_query)
        elif action == "buy_worker":
            await self.buy_worker(callback_query, user)

    async def gold_click(self, callback_query, user):
        if user.workers <= 0:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É —Ä–∞–±–æ—á–∏—Ö")
        else:
            user.workers -= 1
            user.gold_per_sec += 10
            if user.gold_per_sec == 10:
                asyncio.create_task(self.give_gold(callback_query.from_user.id))
            await callback_query.message.answer(f"1 —Ä–∞–±–æ—á–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ–±—ã—á—É –∑–æ–ª–æ—Ç–∞.\n–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {user.workers}")

    async def exp_click(self, callback_query, user):
        if user.workers <= 0:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É —Ä–∞–±–æ—á–∏—Ö")
        else:
            user.workers -= 1
            user.exp_per_sec += 20
            if user.exp_per_sec == 20:
                asyncio.create_task(self.give_exp(callback_query.from_user.id))
            await callback_query.message.answer(f"1 —Ä–∞–±–æ—á–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ–±—ã—á—É –æ–ø—ã—Ç–∞. \n–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {user.workers}")

    async def profile(self, callback_query, user):
        await callback_query.message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üëæ:\n–£—Ä–æ–≤–µ–Ω—å üëΩ: {user.level}\n–ó–æ–ª–æ—Ç–æ üí∞: {user.gold}\n–û–ø—ã—Ç ‚ú®: {user.exp}\n–†–∞–±–æ—á–∏–µ üë∑: {user.workers}")

    async def stats(self, callback_query, user):
        await callback_query.message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–æ–ª–æ—Ç–æ/—Å: {user.gold_per_sec}\n–û–ø—ã—Ç/—Å: {user.exp_per_sec}")

    async def shop(self, callback_query):
        await callback_query.message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ: {self.shop.worker_cost} –∑–æ–ª–æ—Ç–∞.\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ üë∑", callback_data="buy_worker")]]))

    async def guide(self, callback_query):
        await callback_query.message.answer("–≠—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.")

    async def buy_worker(self, callback_query, user):
        if user.gold >= self.shop.worker_cost and self.shop.available_workers > 0:
            user.gold -= self.shop.worker_cost
            user.workers += 1
            self.shop.available_workers -= 1
            await callback_query.message.answer(f"–í—ã –∫—É–ø–∏–ª–∏ —Ä–∞–±–æ—á–µ–≥–æ. –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {self.shop.available_workers}\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ: {self.shop.worker_cost * 2} –∑–æ–ª–æ—Ç–∞.\n–£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {user.workers} —Ä–∞–±–æ—á–∏—Ö.")
        else:
            await callback_query.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")

    async def give_gold(self, user_id):
        while self.users[user_id].gold_per_sec > 0:
            self.users[user_id].gold += self.users[user_id].gold_per_sec
            await asyncio.sleep(1)

    async def give_exp(self, user_id):
        while self.users[user_id].exp_per_sec > 0:
            self.users[user_id].exp += self.users[user_id].exp_per_sec
            await asyncio.sleep(1)


bot = GameBot(token)
asyncio.run(bot.start())
