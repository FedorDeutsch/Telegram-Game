import asyncio
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import time

token = "YOUR_BOT_TOKEN_HERE"

DATABASE_CONFIG = {
    "user": "postgresl",
    "password": "postgres",
    "database": "your_database_name",
    "host": "192.168.1.24",
    "port": 5424
}

class User:
    def __init__(self, user_id):
        self.user_id = user_id
        self.gold = 0  # –ó–æ–ª–æ—Ç–æ
        self.exp = 0  # –û–ø—ã—Ç
        self.level = 1  # –£—Ä–æ–≤–µ–Ω—å
        self.workers = 2  # –†–∞–±–æ—á–∏–µ
        self.gold_per_sec = 0  # –ó–æ–ª–æ—Ç–æ –≤ —Å–µ–∫—É–Ω–¥—É
        self.exp_per_sec = 0  # –û–ø—ã—Ç –≤ —Å–µ–∫—É–Ω–¥—É
        self.gold_workers = 0  # –†–∞–±–æ—á–∏–µ –Ω–∞ –¥–æ–±—ã—á–µ –∑–æ–ª–æ—Ç–∞
        self.exp_workers = 0  # –†–∞–±–æ—á–∏–µ –Ω–∞ –¥–æ–±—ã—á–µ –æ–ø—ã—Ç–∞
        self.last_update = time.time()  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    def update_resources(self):
        now = time.time()
        sec = now - self.last_update

        self.gold += self.gold_per_sec * sec
        self.exp += self.exp_per_sec * sec

        self.last_update = now
        self.level_up()

    def level_up(self):
        needed_exp = self.level * 200
        while self.exp >= needed_exp:
            self.exp -= needed_exp
            self.level += 1
            needed_exp = self.level * 200

class GameBot:
    def __init__(self, token):
        self.bot = Bot(token)
        self.dp = Dispatcher()
        self.users = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.update_interval = 5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.gold_effect = 5  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–æ–ª–æ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–∏—Ä–∫–∏
        self.exp_effect = 10  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –æ–ø—ã—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –º–µ—á–∞
        self.worker_cost = 100  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ

    async def start(self):
        self.dp.message.register(self.start_command, Command(commands=["start"]))
        self.dp.message.register(self.save_command, Command(commands=["save"]))
        self.dp.callback_query.register(self.button_click, lambda c: True)
        await self.bot.delete_webhook(drop_pending_updates=True)
        asyncio.create_task(self.update_resources_loop())
        await self.dp.start_polling(self.bot)

    async def update_resources_loop(self):
        while True:
            for user in self.users.values():
                user.update_resources()
            await asyncio.sleep(self.update_interval)

    def get_user(self, user_id):
        if user_id not in self.users:
            self.users[user_id] = User(user_id)
        return self.users[user_id]

    async def start_command(self, message: types.Message):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±—ã—á–∞ –∑–æ–ª–æ—Ç–∞ üí∞", callback_data="gold")],
            [InlineKeyboardButton(text="–î–æ–±—ã—á–∞ –æ–ø—ã—Ç–∞ ‚ú®", callback_data="exp")],
            [InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω üõí", callback_data="shop")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å üë§", callback_data="profile")],
            [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="statistics")]
        ])
        await message.answer("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

    async def save_command(self, message: types.Message):
        user_id = message.from_user.id
        user = self.get_user(user_id)
        await self.save_user(user)
        await message.answer("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    async def button_click(self, callback_query: types.CallbackQuery):
        user_id = callback_query.from_user.id
        user = self.get_user(user_id)
        user.update_resources()
        action = callback_query.data

        if action == "gold":
            await self.gold_click(callback_query, user)
        elif action == "exp":
            await self.exp_click(callback_query, user)
        elif action == "shop":
            await self.shop_menu(callback_query, user)
        elif action == "profile":
            await self.profile(callback_query, user)
        elif action == "statistics":
            await self.statistics(callback_query, user)
        elif action == "buy_worker":
            await self.buy_worker(callback_query, user)
        elif action == "upgrade_pickaxe":
            await self.upgrade_pickaxe(callback_query, user)
        elif action == "upgrade_sword":
            await self.upgrade_sword(callback_query, user)

    async def gold_click(self, callback_query, user):
        if user.workers <= 0:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö")
        else:
            user.workers -= 1
            user.gold_workers += 1
            user.gold_per_sec += 10
            await callback_query.message.answer(
                f"1 —Ä–∞–±–æ—á–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ–±—ã—á—É –∑–æ–ª–æ—Ç–∞.\n–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {user.workers}"
            )

    async def exp_click(self, callback_query, user):
        if user.workers <= 0:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö")
        else:
            user.workers -= 1
            user.exp_workers += 1
            user.exp_per_sec += 20
            await callback_query.message.answer(
                f"1 —Ä–∞–±–æ—á–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ–±—ã—á—É –æ–ø—ã—Ç–∞.\n–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {user.workers}"
            )

    async def shop_menu(self, callback_query, user):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ üë∑", callback_data="buy_worker")],
            [InlineKeyboardButton(text="–£–ª—É—á—à–∏—Ç—å –∫–∏—Ä–∫—É ‚õèÔ∏è", callback_data="upgrade_pickaxe")],
            [InlineKeyboardButton(text="–£–ª—É—á—à–∏—Ç—å –º–µ—á ‚öîÔ∏è", callback_data="upgrade_sword")]
        ])
        await callback_query.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=keyboard)

    async def profile(self, callback_query, user):
        await callback_query.message.answer(
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üë§:\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
            f"–û–ø—ã—Ç: {int(user.exp)}/{user.level * 200}\n"
            f"–ó–æ–ª–æ—Ç–æ: {int(user.gold)}\n"
            f"–ó–æ–ª–æ—Ç–æ/—Å: {user.gold_per_sec}\n"
            f"–û–ø—ã—Ç/—Å: {user.exp_per_sec}\n"
            f"–†–∞–±–æ—á–∏–µ: {user.workers}"
        )

    async def statistics(self, callback_query, user):
        await callback_query.message.answer(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä:\n"
            f"–†–∞–±–æ—á–∏–µ –Ω–∞ –¥–æ–±—ã—á–µ –∑–æ–ª–æ—Ç–∞: {user.gold_workers}\n"
            f"–†–∞–±–æ—á–∏–µ –Ω–∞ –¥–æ–±—ã—á–µ –æ–ø—ã—Ç–∞: {user.exp_workers}\n"
            f"–ó–æ–ª–æ—Ç–æ –≤ —Å–µ–∫—É–Ω–¥—É: {user.gold_per_sec}\n"
            f"–û–ø—ã—Ç –≤ —Å–µ–∫—É–Ω–¥—É: {user.exp_per_sec}"
        )

    async def buy_worker(self, callback_query, user):
        if user.gold >= self.worker_cost:
            user.gold -= self.worker_cost
            user.workers += 1
            self.worker_cost *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ üë∑", callback_data="buy_worker")],
                [InlineKeyboardButton(text="–£–ª—É—á—à–∏—Ç—å –∫–∏—Ä–∫—É ‚õèÔ∏è", callback_data="upgrade_pickaxe")],
                [InlineKeyboardButton(text="–£–ª—É—á—à–∏—Ç—å –º–µ—á ‚öîÔ∏è", callback_data="upgrade_sword")]
            ])
            await callback_query.message.edit_text(
                f"–í—ã –∫—É–ø–∏–ª–∏ —Ä–∞–±–æ—á–µ–≥–æ. –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {user.workers}",
                reply_markup=keyboard
            )
        else:
            await callback_query.message.answer(f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {int(self.worker_cost - user.gold)} –∑–æ–ª–æ—Ç–∞.")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        await callback_query.answer()

    async def upgrade_pickaxe(self, callback_query, user):
        cost = self.gold_effect * 10
        if user.gold < cost:
            await callback_query.message.answer(f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {int(cost - user.gold)} –∑–æ–ª–æ—Ç–∞.")
        else:
            user.gold -= cost
            user.gold_per_sec += self.gold_effect
            self.gold_effect *= 2
            await callback_query.message.answer(f"–í—ã —É–ª—É—á—à–∏–ª–∏ —Å–≤–æ—é –∫–∏—Ä–∫—É. –¢–µ–ø–µ—Ä—å –∑–æ–ª–æ—Ç–æ –≤ —Å–µ–∫—É–Ω–¥—É: {user.gold_per_sec}")

    async def upgrade_sword(self, callback_query, user):
        cost = self.exp_effect * 10
        if user.gold < cost:
            await callback_query.message.answer(f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {int(cost - user.gold)} –∑–æ–ª–æ—Ç–∞.")
        else:
            user.gold -= cost
            user.exp_per_sec += self.exp_effect
            self.exp_effect *= 2
            await callback_query.message.answer(f"–í—ã —É–ª—É—á—à–∏–ª–∏ —Å–≤–æ–π –º–µ—á. –¢–µ–ø–µ—Ä—å –æ–ø—ã—Ç –≤ —Å–µ–∫—É–Ω–¥—É: {user.exp_per_sec}")

    async def save_user(self, user):
        conn = await asyncpg.connect(**DATABASE_CONFIG)
        user_exists = await conn.fetchval('SELECT EXISTS(SELECT 1 FROM users WHERE user_id=$1)', user.user_id)

        if user_exists:
            await conn.execute('''
                UPDATE users SET gold=$1, exp=$2, level=$3, workers=$4, gold_per_sec=$5, exp_per_sec=$6, last_update=$7
                WHERE user_id=$8
            ''', user.gold, user.exp, user.level, user.workers, user.gold_per_sec, user.exp_per_sec, time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(user.last_update)), user.user_id)
        else:
            await conn.execute('''
                INSERT INTO users(user_id, gold, exp, level, workers, gold_per_sec, exp_per_sec, last_update)
                VALUES($1, $2, $3, $4, $5, $6, $7, $8)
            ''', user.user_id, user.gold, user.exp, user.level, user.workers, user.gold_per_sec, user.exp_per_sec, time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(user.last_update)))

        await conn.close()

bot = GameBot(token)
asyncio.run(bot.start())
